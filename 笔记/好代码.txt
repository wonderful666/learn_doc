好代码标准

简洁
1.易读，易改，易测，易调
2.函数职责单一，单一抽象层，避免深层嵌套，封装变化
3.编程规范良好，风格规范统一，符合度高
4.代码自注释能力强，注释可读性强，符合编码规范要求

可维护性
1.平均圈复杂度，代码重复率，函数平均代码行，嵌套深度符合要求，无冗余代码
2.分层设计，代码合理运用设计原则最佳实践，如常用设计原则：业务与数据隔离，Ui与逻辑隔离，高内聚低耦合，高扇入低扇出等，符合EOSP的规范设计架构
3.重复代码封装，函数短小，缩小依赖范围，通过抽象隔离变化，向着稳定的方向依赖
4清晰胜于技巧，避免复杂编程技巧
5.具备可配置性，可扩展性
6.设计代码充分考虑可维可测，大数据打点，日志级别清晰，可配置，简明扼要(时间，对象，入口，出口，动作，原因)，禁止频繁打印，程序崩溃结束前要有干净详细的遗言，事件记录

可测试性
1.易于自动化测试，有完善的可测试性设计、方案和设计文档
2.子系统，模块，组件，子功能等要容易被隔离以降低测试复杂度，要满足高内聚低耦合原则
3.特性与需求具备隔离设计，基于平台故障检测方案的异常上报设计
4.具备清晰的可维可测能力，日志级别清晰，可配置，禁止频繁打印，保证打印有效性
5.有自设计的debug和动态调试接口，易测易调试

安全
1.程序在处理外部数据时必须经过严格的合法校验，防注入，防篡改
2.合理的逻辑设计，有充分的保护，校验，防呆措施
3.通过防御性编程来弥补潜在的编码疏忽：合理申请/释放系统资源，内存边界合理检查，使用安全函数/安全组件，敏感数据保护
4.安全函数使用符合规范，安全编程规范符合度高
5.使用安全内存操作函数，指针有做必要的保护，指针变量无重复释放，释放后必须置空，防止造成安全泄露，防攻击
6.敏感数据与隐私保护：MAC地址，IP地址，SN，密钥等敏感信息禁止明文log打印或者是网络传输，代码禁止硬编码密钥，公网地址等信息
7.攻击面的保护：非必要禁止对外暴露组件，必须对外暴露的组件必须进行访问权限保护，对外部数据内容进行白名单验证，以降低攻击面
8.密码算法的使用：要符合密码算法应用规范的要求

可靠性
1.入参与输入合法性校验
2.边界场景做了充分考虑
3.异常场景有正确的保护，恢复，防呆措施
4.外部依赖异常场景要考虑重试机制，超时机制，容错机制等设计与兼容性
5充分考虑老版本的方案兼容性
6.资源并发的地方有必要保护
7.无资源泄露（句柄，内存，线程，数据库，应用类资源）

高效性
1.模块耦合度低
2.循环，数据规模处理小，数据结构简单高效，字节对齐，合理的逻辑设计，充分考虑代码性能
3.减少低速率IO的读写操作
4.节约内存，减少常驻内存使用，使用及时释放，不申请，不常驻过大内存，高效内存利用
5.消息缓存要有规格限制，防止攻击造成内存耗尽
6.选择高效算法，减少cpu外设访问开销，减小冗余和无效计算，合理使用并行编程
7.编译器优化代码和非优化代码使用